

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>Web3.0</title>
  <subtitle>A minimal, responsive and feature-rich Jekyll theme for technical writing.</subtitle>
  <updated>2025-04-23T02:25:28+09:00</updated>
  <author>
    <name>anonymous</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator>
  <rights> © 2025 anonymous </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>OnlyPwner (ALL OR NOTHING/LIQUID STAKING) Write Ups</title>
    <link href="http://localhost:4000/posts/onlypwn/" rel="alternate" type="text/html" title="OnlyPwner (ALL OR NOTHING/LIQUID STAKING) Write Ups" />
    <published>2025-04-14T00:00:00+09:00</published>
  
    <updated>2025-04-14T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/onlypwn/</id>
    <content src="http://localhost:4000/posts/onlypwn/" />
    <author>
      <name>anonymous</name>
    </author>

  
    
    <category term="Wargame" />
    
  

  
    <summary>
      





      ALL OR NOTHING

        if (allOrNothing.balance == 0) {
            console.log("is-solved:true");
        } else {
            console.log("is-solved:false");
        }

we should drain assets of allOrNothing it to solve

        AllOrNothing allOrNothing = new AllOrNothing(1 ether, 10 minutes);

        allOrNothing.bet{value: 1 ether}(1, address(uint160(user) + 1));
        allOrNothing.bet...
    </summary>
  

  </entry>

  
  <entry>
    <title>Remedy CTF 2025 (Diamond, Rich, Casino)</title>
    <link href="http://localhost:4000/posts/Remedy-CTF2525/" rel="alternate" type="text/html" title="Remedy CTF 2025 (Diamond, Rich, Casino)" />
    <published>2025-01-26T00:00:00+09:00</published>
  
    <updated>2025-01-26T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/Remedy-CTF2525/</id>
    <content src="http://localhost:4000/posts/Remedy-CTF2525/" />
    <author>
      <name>anonymous</name>
    </author>

  
    
    <category term="CTF" />
    
  

  
    <summary>
      





      i could solve only two easy solidity challs :/ in the casino challenge, i was able to bypass the signature but not the bet() function. hope that i will be better


Diamoand Heist

    uint constant public DIAMONDS = 31337;
    uint constant public HEXENS_COINS = 10_000 ether;
    bool claimed;
    
    constructor (address player) {
        PLAYER = player;
        vaultFactory = new VaultFacto...
    </summary>
  

  </entry>

  
  <entry>
    <title>Simple FlashLoan, Based on Aave V3</title>
    <link href="http://localhost:4000/posts/flashloan-aave/" rel="alternate" type="text/html" title="Simple FlashLoan, Based on Aave V3" />
    <published>2025-01-24T00:00:00+09:00</published>
  
    <updated>2025-01-24T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/flashloan-aave/</id>
    <content src="http://localhost:4000/posts/flashloan-aave/" />
    <author>
      <name>anonymous</name>
    </author>

  
    
    <category term="DeFi" />
    
  

  
    <summary>
      





      개요



플래시론은 DeFi에서의 무담보 대출이다. 사용자는 플래시론을 통해서 원하는 ERC 20 토큰을 대출받아 사용할 수 있으며 이렇게 대출받은 대금은 한 트랜잭션 내에서 상환까지 모두 이루어져야 한다. 만약 대출금 상환이 제대로 이루어지지 않는다면 플래시론을 시작으로 생성된 트랜잭션은 없던 것으로 간주되며 Pool로 돈이 상환되게 된다.

사용자가 유동성 풀에 원하는 토큰에 대해서 대출을 요청하면 풀에서 대출이 실행되며, 대출받은 토큰을 이용해서 우리가 원하는 작업을 수행할 수 있다. 원하는 작업을 수행한 이후에는 풀로 대출금과 프리미엄을 상환하도록 승인하고, 대출금 + 프리미엄을 풀로 다시 상환하며 하나의 트랜잭션이 마무리된다.

Flashloan.sol

// SPDX-License-Iden...
    </summary>
  

  </entry>

  
  <entry>
    <title>Dreamhack CTF (ERC1337)</title>
    <link href="http://localhost:4000/posts/ERC1337-DH/" rel="alternate" type="text/html" title="Dreamhack CTF (ERC1337)" />
    <published>2024-04-07T00:00:00+09:00</published>
  
    <updated>2024-04-07T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/ERC1337-DH/</id>
    <content src="http://localhost:4000/posts/ERC1337-DH/" />
    <author>
      <name>anonymous</name>
    </author>

  
    
    <category term="CTF" />
    
  

  
    <summary>
      





      개요

ERC1337 문제는 Third Contract 분석을 통해서 에 구조를 파악하여 취약점을 악용하여 Owner가 가지고 있는 토큰을 탈취하는 문제이다.

contract Level {
    ERC1337 public token;
    uint256 public solved;
    
    constructor() {
        token = new ERC1337("DHT");
    }

    function solve() external {
        if (token.balanceOf(address(this)) == 1) {
            solved = 1;
        }
    }
}

ERC1337.sol 파일을 보면 Level이라는 컨트랙트 내에 solve()...
    </summary>
  

  </entry>

  
  <entry>
    <title>Real World CTF 6th (SafeBridge)</title>
    <link href="http://localhost:4000/posts/RealWorld-CTF-6th/" rel="alternate" type="text/html" title="Real World CTF 6th (SafeBridge)" />
    <published>2024-01-29T00:00:00+09:00</published>
  
    <updated>2024-01-29T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/RealWorld-CTF-6th/</id>
    <content src="http://localhost:4000/posts/RealWorld-CTF-6th/" />
    <author>
      <name>anonymous</name>
    </author>

  
    
    <category term="CTF" />
    
  

  
    <summary>
      





      개요

Real World CTF에 웹3 문제 있길래 풀어봤다. SafeBridge 문제의 솔브 조건은 L1 -&amp;gt; L2 브리지에서 토큰 잔액을 빼내는 것이었다. 이더리움에서 L1 -&amp;gt; L2 브리지는 주로 두 가지 계층 간의 상호 작용을 용이하게 하는 기술을 가리킨다.

contract Challenge {
    address public immutable BRIDGE;
    address public immutable MESSENGER;
    address public immutable WETH;

    constructor(address bridge, address messenger, address weth) {
        BRIDGE = bridge;
        MESSEN...
    </summary>
  

  </entry>

</feed>


